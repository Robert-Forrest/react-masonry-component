{"version":3,"sources":["../src/index.js"],"names":["isBrowser","window","Masonry","require","imagesloaded","MasonryComponent","props","masonry","erd","undefined","latestKnownDomChildren","imagesLoadedCancelRef","masonryContainer","initializeMasonry","bind","getCurrentDomChildren","diffDomChildren","performLayout","derefImagesLoaded","imagesLoaded","reloadLayout","initializeResizableChildren","listenToElementResize","destroyErd","force","options","onLayoutComplete","on","onRemoveComplete","node","children","itemSelector","querySelectorAll","Array","prototype","slice","call","forceItemReload","knownChildrenStillAttached","filter","element","parentNode","length","currentDomChildren","removed","attachedKnownChild","indexOf","newDomChildren","currentChild","beginningIndex","prepended","newChild","prepend","appended","el","moved","child","index","old","new","diff","reloadItems","enableResizableChildren","forEach","removeAllListeners","remove","updateOnEachComponentUpdate","disableImagesLoaded","event","updateOnEachImageLoad","handler","instance","onImagesLoaded","imgLoad","imagesLoadedOptions","off","cancel","layout","leading","strategy","listenTo","uninstall","destroy","Object","keys","propTypes","React","createElement","elementType","ref","n","Component","module","exports","default","defaultProps","className","PropTypes","bool","func","object","string"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAApC;AACA,IAAMC,OAAO,GAAGF,SAAS,GAAGC,MAAM,CAACC,OAAP,IAAkBC,OAAO,CAAC,gBAAD,CAA5B,GAAiD,IAA1E;AACA,IAAMC,YAAY,GAAGJ,SAAS,GAAGG,OAAO,CAAC,cAAD,CAAV,GAA6B,IAA3D;;IAEME,gB;;;;;AACJ,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,8BAAMA,KAAN;AACA,UAAKC,OAAL,GAAe,KAAf;AACA,UAAKC,GAAL,GAAWC,SAAX;AACA,UAAKC,sBAAL,GAA8B,EAA9B;AACA,UAAKC,qBAAL,GAA6BF,SAA7B;AACA,UAAKG,gBAAL,GAAwBH,SAAxB;AAEA,UAAKI,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBC,IAAvB,6CAAzB;AACA,UAAKC,qBAAL,GAA6B,MAAKA,qBAAL,CAA2BD,IAA3B,6CAA7B;AACA,UAAKE,eAAL,GAAuB,MAAKA,eAAL,CAAqBF,IAArB,6CAAvB;AACA,UAAKG,aAAL,GAAqB,MAAKA,aAAL,CAAmBH,IAAnB,6CAArB;AACA,UAAKI,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBJ,IAAvB,6CAAzB;AACA,UAAKK,YAAL,GAAoB,MAAKA,YAAL,CAAkBL,IAAlB,6CAApB;AACA,UAAKM,YAAL,GAAoB,MAAKA,YAAL,CAAkBN,IAAlB,6CAApB;AACA,UAAKO,2BAAL,GAAmC,MAAKA,2BAAL,CAAiCP,IAAjC,6CAAnC;AACA,UAAKQ,qBAAL,GAA6B,MAAKA,qBAAL,CAA2BR,IAA3B,6CAA7B;AACA,UAAKS,UAAL,GAAkB,MAAKA,UAAL,CAAgBT,IAAhB,6CAAlB;AAjBiB;AAkBlB;;;;WAED,2BAAmBU,KAAnB,EAA0B;AACxB,UAAI,CAAC,KAAKjB,OAAN,IAAiBiB,KAArB,EAA4B;AAC1B,aAAKjB,OAAL,GAAe,IAAIL,OAAJ,CACb,KAAKU,gBADQ,EAEb,KAAKN,KAAL,CAAWmB,OAFE,CAAf;;AAKA,YAAI,KAAKnB,KAAL,CAAWoB,gBAAf,EAAiC;AAC/B,eAAKnB,OAAL,CAAaoB,EAAb,CAAgB,gBAAhB,EAAkC,KAAKrB,KAAL,CAAWoB,gBAA7C;AACD;;AAED,YAAI,KAAKpB,KAAL,CAAWsB,gBAAf,EAAiC;AAC/B,eAAKrB,OAAL,CAAaoB,EAAb,CAAgB,gBAAhB,EAAkC,KAAKrB,KAAL,CAAWsB,gBAA7C;AACD;;AAED,aAAKlB,sBAAL,GAA8B,KAAKK,qBAAL,EAA9B;AACD;AACF;;;WAED,iCAAyB;AACvB,UAAMc,IAAI,GAAG,KAAKjB,gBAAlB;AACA,UAAMkB,QAAQ,GAAG,KAAKxB,KAAL,CAAWmB,OAAX,CAAmBM,YAAnB,GAAkCF,IAAI,CAACG,gBAAL,CAAsB,KAAK1B,KAAL,CAAWmB,OAAX,CAAmBM,YAAzC,CAAlC,GAA2FF,IAAI,CAACC,QAAjH;AACA,aAAOG,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,QAA3B,CAAP;AACD;;;WAED,2BAAmB;AACjB,UAAIO,eAAe,GAAG,KAAtB;AAEA,UAAMC,0BAA0B,GAAG,KAAK5B,sBAAL,CAA4B6B,MAA5B,CAAmC,UAASC,OAAT,EAAkB;AACtF;AACN;AACA;AACA;AACA;AACM,eAAO,CAAC,CAACA,OAAO,CAACC,UAAjB;AACD,OAPkC,CAAnC;AASA;AACJ;AACA;AACA;AACA;;AACI,UAAIH,0BAA0B,CAACI,MAA3B,KAAsC,KAAKhC,sBAAL,CAA4BgC,MAAtE,EAA8E;AAC5EL,QAAAA,eAAe,GAAG,IAAlB;AACD;;AAED,UAAMM,kBAAkB,GAAG,KAAK5B,qBAAL,EAA3B;AAEA;AACJ;AACA;AACA;;AACI,UAAM6B,OAAO,GAAGN,0BAA0B,CAACC,MAA3B,CAAkC,UAASM,kBAAT,EAA6B;AAC7E,eAAO,CAAC,CAACF,kBAAkB,CAACG,OAAnB,CAA2BD,kBAA3B,CAAT;AACD,OAFe,CAAhB;AAIA;AACJ;AACA;AACA;;AACI,UAAME,cAAc,GAAGJ,kBAAkB,CAACJ,MAAnB,CAA0B,UAASS,YAAT,EAAuB;AACtE,eAAO,CAAC,CAACV,0BAA0B,CAACQ,OAA3B,CAAmCE,YAAnC,CAAT;AACD,OAFsB,CAAvB;AAIA,UAAIC,cAAc,GAAG,CAArB,CAvCiB,CAyCjB;;AACA,UAAMC,SAAS,GAAGH,cAAc,CAACR,MAAf,CAAsB,UAASY,QAAT,EAAmB;AACzD,YAAMC,OAAO,GAAIH,cAAc,KAAKN,kBAAkB,CAACG,OAAnB,CAA2BK,QAA3B,CAApC;;AAEA,YAAIC,OAAJ,EAAa;AACX;AACAH,UAAAA,cAAc;AACf;;AAED,eAAOG,OAAP;AACD,OATiB,CAAlB,CA1CiB,CAqDjB;;AACA,UAAMC,QAAQ,GAAGN,cAAc,CAACR,MAAf,CAAsB,UAASe,EAAT,EAAa;AAClD,eAAOJ,SAAS,CAACJ,OAAV,CAAkBQ,EAAlB,MAA0B,CAAC,CAAlC;AACD,OAFgB,CAAjB;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI;;AACA,UAAIC,KAAK,GAAG,EAAZ;AAEA;AACJ;AACA;;AACI,UAAIX,OAAO,CAACF,MAAR,KAAmB,CAAvB,EAA0B;AACxB;AACN;AACA;AACA;AACA;AACA;AACMa,QAAAA,KAAK,GAAGjB,0BAA0B,CAACC,MAA3B,CAAkC,UAASiB,KAAT,EAAgBC,KAAhB,EAAuB;AAC/D,iBAAOA,KAAK,KAAKd,kBAAkB,CAACG,OAAnB,CAA2BU,KAA3B,CAAjB;AACD,SAFO,CAAR;AAGD;;AAED,WAAK9C,sBAAL,GAA8BiC,kBAA9B;AAEA,aAAO;AACLe,QAAAA,GAAG,EAAEpB,0BADA;AAC4B;AACjCqB,QAAAA,GAAG,EAAEhB,kBAFA;AAEoB;AACzBC,QAAAA,OAAO,EAAEA,OAHJ;AAILS,QAAAA,QAAQ,EAAEA,QAJL;AAKLH,QAAAA,SAAS,EAAEA,SALN;AAMLK,QAAAA,KAAK,EAAEA,KANF;AAOLlB,QAAAA,eAAe,EAAEA;AAPZ,OAAP;AASD;;;WAED,yBAAiB;AACf,UAAMuB,IAAI,GAAG,KAAK5C,eAAL,EAAb;AACA,UAAI6C,WAAW,GAAGD,IAAI,CAACvB,eAAL,IAAwBuB,IAAI,CAACL,KAAL,CAAWb,MAAX,GAAoB,CAA9D,CAFe,CAIf;;AACA,UAAIkB,IAAI,CAAChB,OAAL,CAAaF,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,YAAI,KAAKpC,KAAL,CAAWwD,uBAAf,EAAwC;AACtCF,UAAAA,IAAI,CAAChB,OAAL,CAAamB,OAAb,CAAqB,KAAKvD,GAAL,CAASwD,kBAA9B,EAAkD,KAAKxD,GAAvD;AACD;;AACD,aAAKD,OAAL,CAAa0D,MAAb,CAAoBL,IAAI,CAAChB,OAAzB;AACAiB,QAAAA,WAAW,GAAG,IAAd;AACD;;AAED,UAAID,IAAI,CAACP,QAAL,CAAcX,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,aAAKnC,OAAL,CAAa8C,QAAb,CAAsBO,IAAI,CAACP,QAA3B;;AAEA,YAAIO,IAAI,CAACV,SAAL,CAAeR,MAAf,KAA0B,CAA9B,EAAiC;AAC/BmB,UAAAA,WAAW,GAAG,IAAd;AACD;;AAED,YAAI,KAAKvD,KAAL,CAAWwD,uBAAf,EAAwC;AACtCF,UAAAA,IAAI,CAACP,QAAL,CAAcU,OAAd,CAAsB,KAAKzC,qBAA3B,EAAkD,IAAlD;AACD;AACF;;AAED,UAAIsC,IAAI,CAACV,SAAL,CAAeR,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,YAAI,CAACmB,WAAL,EAAkB;AAChB,eAAKtD,OAAL,CAAa2C,SAAb,CAAuBU,IAAI,CAACV,SAA5B;AACD;;AAED,YAAI,KAAK5C,KAAL,CAAWwD,uBAAf,EAAwC;AACtCF,UAAAA,IAAI,CAACV,SAAL,CAAea,OAAf,CAAuB,KAAKzC,qBAA5B,EAAmD,IAAnD;AACD;AACF;;AAED,UAAIuC,WAAJ,EAAiB;AACf,aAAKtD,OAAL,CAAasD,WAAb;AACD;;AAED,UAAI,KAAKvD,KAAL,CAAW4D,2BAAX,IAA0CL,WAA9C,EAA2D;AACzD,aAAKzC,YAAL;AACD;AACF;;;WAED,6BAAqB;AACnB,WAAKT,qBAAL;AACA,WAAKA,qBAAL,GAA6BF,SAA7B;AACD;;;WAED,wBAAgB;AACd,UAAI,KAAKH,KAAL,CAAW6D,mBAAf,EAAoC;AAClC;AACD;;AAED,UAAI,KAAKxD,qBAAT,EAAgC;AAC9B,aAAKO,iBAAL;AACD;;AAED,UAAMkD,KAAK,GAAG,KAAK9D,KAAL,CAAW+D,qBAAX,GAAmC,UAAnC,GAAgD,QAA9D;AACA,UAAMC,OAAO,GAAG,qBACd,UAASC,QAAT,EAAmB;AACjB,YAAI,KAAKjE,KAAL,CAAWkE,cAAf,EAA+B;AAC7B,eAAKlE,KAAL,CAAWkE,cAAX,CAA0BD,QAA1B;AACD;;AACD,aAAKnD,YAAL;AACD,OALD,CAKEN,IALF,CAKO,IALP,CADc,EAMA,GANA,CAAhB;AAQA,UAAM2D,OAAO,GAAGrE,YAAY,CAAC,KAAKQ,gBAAN,EAAwB,KAAKN,KAAL,CAAWoE,mBAAnC,CAAZ,CAAoE/C,EAApE,CAAuEyC,KAAvE,EAA8EE,OAA9E,CAAhB;;AAEA,WAAK3D,qBAAL,GAA6B,YAAW;AACtC8D,QAAAA,OAAO,CAACE,GAAR,CAAYP,KAAZ,EAAmBE,OAAnB;AACAA,QAAAA,OAAO,CAACM,MAAR;AACD,OAHD;AAID;;;WAED,wBAAgB;AAAA;;AACd,2BAAS,YAAM;AACX,QAAA,MAAI,CAACrE,OAAL,CAAasE,MAAb;AACD,OAFH,EAEK,GAFL,EAEU;AACNC,QAAAA,OAAO,EAAE;AADH,OAFV;AAMD;;;WAED,uCAA+B;AAC7B,UAAI,CAAC,KAAKxE,KAAL,CAAWwD,uBAAhB,EAAyC;AACvC;AACD;;AAED,WAAKtD,GAAL,GAAW,oCAA2B;AACpCuE,QAAAA,QAAQ,EAAE;AAD0B,OAA3B,CAAX;AAIA,WAAKrE,sBAAL,CAA4BqD,OAA5B,CAAoC,KAAKzC,qBAAzC,EAAgE,IAAhE;AACD;;;WAED,+BAAuBgC,EAAvB,EAA2B;AACzB,WAAK9C,GAAL,CAASwE,QAAT,CAAkB1B,EAAlB,EAAsB,KAAKlC,YAA3B;AACD;;;WAED,sBAAc;AACZ,UAAI,KAAKZ,GAAT,EAAc;AACZ,aAAKE,sBAAL,CAA4BqD,OAA5B,CAAoC,KAAKvD,GAAL,CAASyE,SAA7C,EAAwD,KAAKzE,GAA7D;AACD;AACF;;;WAED,6BAAqB;AACnB,WAAKK,iBAAL;AACA,WAAKQ,2BAAL;AACA,WAAKF,YAAL;AACD;;;WAED,8BAAsB;AACpB,WAAKF,aAAL;AACA,WAAKE,YAAL;AACD;;;WAED,gCAAwB;AACtB,WAAKI,UAAL,GADsB,CAGtB;;AACA,UAAI,KAAKjB,KAAL,CAAWoB,gBAAf,EAAiC;AAC/B,aAAKnB,OAAL,CAAaoE,GAAb,CAAiB,gBAAjB,EAAmC,KAAKrE,KAAL,CAAWoB,gBAA9C;AACD;;AAED,UAAI,KAAKpB,KAAL,CAAWsB,gBAAf,EAAiC;AAC/B,aAAKrB,OAAL,CAAaoE,GAAb,CAAiB,gBAAjB,EAAmC,KAAKrE,KAAL,CAAWsB,gBAA9C;AACD;;AAED,UAAI,KAAKjB,qBAAT,EAAgC;AAC9B,aAAKO,iBAAL;AACD;;AACD,WAAKX,OAAL,CAAa2E,OAAb;AACD;;;WAED,kBAAU;AAAA;;AACR,UAAM5E,KAAK,GAAG,sBAAK,KAAKA,KAAV,EAAiB6E,MAAM,CAACC,IAAP,CAAY/E,gBAAgB,CAACgF,SAA7B,CAAjB,CAAd;AACA,aAAOC,eAAMC,aAAN,CAAoB,KAAKjF,KAAL,CAAWkF,WAA/B,kCAAgDlF,KAAhD;AAAuDmF,QAAAA,GAAG,EAAE,aAAAC,CAAC;AAAA,iBAAI,MAAI,CAAC9E,gBAAL,GAAwB8E,CAA5B;AAAA;AAA7D,UAA8F,KAAKpF,KAAL,CAAWwB,QAAzG,CAAP;AACD;;;EAnS4B6D,gB;;AAsS/BC,MAAM,CAACC,OAAP,GAAiBxF,gBAAjB;AACAuF,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBzF,gBAAzB;AAEAA,gBAAgB,CAAC0F,YAAjB,GAAgC;AAC9BjC,EAAAA,uBAAuB,EAAE,KADK;AAE9BK,EAAAA,mBAAmB,EAAE,KAFS;AAG9BE,EAAAA,qBAAqB,EAAE,KAHO;AAI9B5C,EAAAA,OAAO,EAAE,EAJqB;AAK9BiD,EAAAA,mBAAmB,EAAE,EALS;AAM9BsB,EAAAA,SAAS,EAAE,EANmB;AAO9BR,EAAAA,WAAW,EAAE,KAPiB;AAQ9B9D,EAAAA,gBAAgB,EAAE,4BAAM,CAAE,CARI;AAS9BE,EAAAA,gBAAgB,EAAE,4BAAM,CAAE,CATI;AAU9BsC,EAAAA,2BAA2B,EAAE;AAVC,CAAhC;AAcA7D,gBAAgB,CAACgF,SAAjB,GAA6B;AAC3BvB,EAAAA,uBAAuB,EAAEmC,mBAAUC,IADR;AAE3B/B,EAAAA,mBAAmB,EAAE8B,mBAAUC,IAFJ;AAG3B1B,EAAAA,cAAc,EAAEyB,mBAAUE,IAHC;AAI3B9B,EAAAA,qBAAqB,EAAE4B,mBAAUC,IAJN;AAK3BzE,EAAAA,OAAO,EAAEwE,mBAAUG,MALQ;AAM3B1B,EAAAA,mBAAmB,EAAEuB,mBAAUG,MANJ;AAO3BZ,EAAAA,WAAW,EAAES,mBAAUI,MAPI;AAQ3B3E,EAAAA,gBAAgB,EAAEuE,mBAAUE,IARD;AAS3BvE,EAAAA,gBAAgB,EAAEqE,mBAAUE,IATD;AAU3BjC,EAAAA,2BAA2B,EAAE+B,mBAAUC;AAVZ,CAA7B","sourcesContent":["import React, { Component } from 'react'\nimport elementResizeDetectorMaker from 'element-resize-detector'\nimport debounce from 'lodash.debounce'\nimport omit from 'lodash.omit'\nimport PropTypes from 'prop-types'\n\nconst isBrowser = typeof window !== 'undefined'\nconst Masonry = isBrowser ? window.Masonry || require('masonry-layout') : null\nconst imagesloaded = isBrowser ? require('imagesloaded') : null\n\nclass MasonryComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.masonry = false\n    this.erd = undefined\n    this.latestKnownDomChildren = []\n    this.imagesLoadedCancelRef = undefined\n    this.masonryContainer = undefined\n\n    this.initializeMasonry = this.initializeMasonry.bind(this)\n    this.getCurrentDomChildren = this.getCurrentDomChildren.bind(this)\n    this.diffDomChildren = this.diffDomChildren.bind(this)\n    this.performLayout = this.performLayout.bind(this)\n    this.derefImagesLoaded = this.derefImagesLoaded.bind(this)\n    this.imagesLoaded = this.imagesLoaded.bind(this)\n    this.reloadLayout = this.reloadLayout.bind(this)\n    this.initializeResizableChildren = this.initializeResizableChildren.bind(this)\n    this.listenToElementResize = this.listenToElementResize.bind(this)\n    this.destroyErd = this.destroyErd.bind(this)\n  }\n\n  initializeMasonry (force) {\n    if (!this.masonry || force) {\n      this.masonry = new Masonry(\n        this.masonryContainer,\n        this.props.options\n      )\n\n      if (this.props.onLayoutComplete) {\n        this.masonry.on('layoutComplete', this.props.onLayoutComplete)\n      }\n\n      if (this.props.onRemoveComplete) {\n        this.masonry.on('removeComplete', this.props.onRemoveComplete)\n      }\n\n      this.latestKnownDomChildren = this.getCurrentDomChildren()\n    }\n  }\n\n  getCurrentDomChildren () {\n    const node = this.masonryContainer\n    const children = this.props.options.itemSelector ? node.querySelectorAll(this.props.options.itemSelector) : node.children\n    return Array.prototype.slice.call(children)\n  }\n\n  diffDomChildren () {\n    let forceItemReload = false\n\n    const knownChildrenStillAttached = this.latestKnownDomChildren.filter(function(element) {\n      /*\n       * take only elements attached to DOM\n       * (aka the parent is the masonry container, not null)\n       * otherwise masonry would try to \"remove it\" again from the DOM\n       */\n      return !!element.parentNode\n    })\n\n    /*\n     * If not all known children are attached to the dom - we have no other way of notifying\n     * masonry to remove the ones not still attached besides invoking a complete item reload.\n     * basically all the rest of the code below does not matter in that case.\n     */\n    if (knownChildrenStillAttached.length !== this.latestKnownDomChildren.length) {\n      forceItemReload = true\n    }\n\n    const currentDomChildren = this.getCurrentDomChildren()\n\n    /*\n     * Since we are looking for a known child which is also attached to the dom AND\n     * not attached to the dom at the same time - this would *always* produce an empty array.\n     */\n    const removed = knownChildrenStillAttached.filter(function(attachedKnownChild) {\n      return !~currentDomChildren.indexOf(attachedKnownChild)\n    })\n\n    /*\n     * This would get any children which are attached to the dom but are *unkown* to us\n     * from previous renders\n     */\n    const newDomChildren = currentDomChildren.filter(function(currentChild) {\n      return !~knownChildrenStillAttached.indexOf(currentChild)\n    })\n\n    let beginningIndex = 0\n\n    // get everything added to the beginning of the DOMNode list\n    const prepended = newDomChildren.filter(function(newChild) {\n      const prepend = (beginningIndex === currentDomChildren.indexOf(newChild))\n\n      if (prepend) {\n        // increase the index\n        beginningIndex++\n      }\n\n      return prepend\n    })\n\n    // we assume that everything else is appended\n    const appended = newDomChildren.filter(function(el) {\n      return prepended.indexOf(el) === -1\n    })\n\n    /*\n     * otherwise we reverse it because so we're going through the list picking off the items that\n     * have been added at the end of the list. this complex logic is preserved in case it needs to be\n     * invoked\n     *\n     * const endingIndex = currentDomChildren.length - 1\n     *\n     * newDomChildren.reverse().filter(function(newChild, i){\n     *     const append = endingIndex == currentDomChildren.indexOf(newChild)\n     *\n     *     if (append) {\n     *         endingIndex--\n     *     }\n     *\n     *     return append\n     * })\n     */\n\n    // get everything added to the end of the DOMNode list\n    let moved = []\n\n    /*\n     * This would always be true (see above about the lofic for \"removed\")\n     */\n    if (removed.length === 0) {\n      /*\n       * 'moved' will contain some random elements (if any) since the \"knownChildrenStillAttached\" is a filter\n       * of the \"known\" children which are still attached - All indexes could basically change. (for example\n       * if the first element is not attached)\n       * Don't trust this array.\n       */\n      moved = knownChildrenStillAttached.filter(function(child, index) {\n        return index !== currentDomChildren.indexOf(child)\n      })\n    }\n\n    this.latestKnownDomChildren = currentDomChildren\n\n    return {\n      old: knownChildrenStillAttached, // Not used\n      new: currentDomChildren, // Not used\n      removed: removed,\n      appended: appended,\n      prepended: prepended,\n      moved: moved,\n      forceItemReload: forceItemReload\n    }\n  }\n\n  performLayout () {\n    const diff = this.diffDomChildren()\n    let reloadItems = diff.forceItemReload || diff.moved.length > 0\n\n    // Would never be true. (see comments of 'diffDomChildren' about 'removed')\n    if (diff.removed.length > 0) {\n      if (this.props.enableResizableChildren) {\n        diff.removed.forEach(this.erd.removeAllListeners, this.erd)\n      }\n      this.masonry.remove(diff.removed)\n      reloadItems = true\n    }\n\n    if (diff.appended.length > 0) {\n      this.masonry.appended(diff.appended)\n\n      if (diff.prepended.length === 0) {\n        reloadItems = true\n      }\n\n      if (this.props.enableResizableChildren) {\n        diff.appended.forEach(this.listenToElementResize, this)\n      }\n    }\n\n    if (diff.prepended.length > 0) {\n      if (!reloadItems) {\n        this.masonry.prepended(diff.prepended)\n      }\n\n      if (this.props.enableResizableChildren) {\n        diff.prepended.forEach(this.listenToElementResize, this)\n      }\n    }\n\n    if (reloadItems) {\n      this.masonry.reloadItems()\n    }\n\n    if (this.props.updateOnEachComponentUpdate || reloadItems) {\n      this.reloadLayout()\n    }\n  }\n\n  derefImagesLoaded () {\n    this.imagesLoadedCancelRef()\n    this.imagesLoadedCancelRef = undefined\n  }\n\n  imagesLoaded () {\n    if (this.props.disableImagesLoaded) {\n      return\n    }\n\n    if (this.imagesLoadedCancelRef) {\n      this.derefImagesLoaded()\n    }\n\n    const event = this.props.updateOnEachImageLoad ? 'progress' : 'always'\n    const handler = debounce(\n      function(instance) {\n        if (this.props.onImagesLoaded) {\n          this.props.onImagesLoaded(instance)\n        }\n        this.reloadLayout()\n      }.bind(this), 100)\n\n    const imgLoad = imagesloaded(this.masonryContainer, this.props.imagesLoadedOptions).on(event, handler)\n\n    this.imagesLoadedCancelRef = function() {\n      imgLoad.off(event, handler)\n      handler.cancel()\n    }\n  }\n\n  reloadLayout () {\n    debounce(() => {\n        this.masonry.layout()\n      }, 100, {\n        leading: true\n      }\n    )\n  }\n\n  initializeResizableChildren () {\n    if (!this.props.enableResizableChildren) {\n      return\n    }\n\n    this.erd = elementResizeDetectorMaker({\n      strategy: 'scroll'\n    })\n\n    this.latestKnownDomChildren.forEach(this.listenToElementResize, this)\n  }\n\n  listenToElementResize (el) {\n    this.erd.listenTo(el, this.reloadLayout)\n  }\n\n  destroyErd () {\n    if (this.erd) {\n      this.latestKnownDomChildren.forEach(this.erd.uninstall, this.erd)\n    }\n  }\n\n  componentDidMount () {\n    this.initializeMasonry()\n    this.initializeResizableChildren()\n    this.imagesLoaded()\n  }\n\n  componentDidUpdate () {\n    this.performLayout()\n    this.imagesLoaded()\n  }\n\n  componentWillUnmount () {\n    this.destroyErd()\n\n    // unregister events\n    if (this.props.onLayoutComplete) {\n      this.masonry.off('layoutComplete', this.props.onLayoutComplete)\n    }\n\n    if (this.props.onRemoveComplete) {\n      this.masonry.off('removeComplete', this.props.onRemoveComplete)\n    }\n\n    if (this.imagesLoadedCancelRef) {\n      this.derefImagesLoaded()\n    }\n    this.masonry.destroy()\n  }\n\n  render () {\n    const props = omit(this.props, Object.keys(MasonryComponent.propTypes))\n    return React.createElement(this.props.elementType, {...props, ref: n => this.masonryContainer = n }, this.props.children)\n  }\n}\n\nmodule.exports = MasonryComponent\nmodule.exports.default = MasonryComponent\n\nMasonryComponent.defaultProps = {\n  enableResizableChildren: false,\n  disableImagesLoaded: false,\n  updateOnEachImageLoad: false,\n  options: {},\n  imagesLoadedOptions: {},\n  className: '',\n  elementType: 'div',\n  onLayoutComplete: () => {},\n  onRemoveComplete: () => {},\n  updateOnEachComponentUpdate: true\n}\n\n\nMasonryComponent.propTypes = {\n  enableResizableChildren: PropTypes.bool,\n  disableImagesLoaded: PropTypes.bool,\n  onImagesLoaded: PropTypes.func,\n  updateOnEachImageLoad: PropTypes.bool,\n  options: PropTypes.object,\n  imagesLoadedOptions: PropTypes.object,\n  elementType: PropTypes.string,\n  onLayoutComplete: PropTypes.func,\n  onRemoveComplete: PropTypes.func,\n  updateOnEachComponentUpdate: PropTypes.bool\n}\n"],"file":"index.js"}