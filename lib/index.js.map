{"version":3,"file":"index.js","names":["isBrowser","window","Masonry","require","imagesloaded","MasonryComponent","props","masonry","erd","undefined","latestKnownDomChildren","imagesLoadedCancelRef","masonryContainer","initializeMasonry","bind","getCurrentDomChildren","diffDomChildren","performLayout","derefImagesLoaded","imagesLoaded","reloadLayout","initializeResizableChildren","listenToElementResize","destroyErd","force","options","onLayoutComplete","on","onRemoveComplete","node","children","itemSelector","querySelectorAll","Array","prototype","slice","call","forceItemReload","knownChildrenStillAttached","filter","element","parentNode","length","currentDomChildren","removed","attachedKnownChild","indexOf","newDomChildren","currentChild","beginningIndex","prepended","newChild","prepend","appended","el","moved","child","index","old","new","diff","reloadItems","enableResizableChildren","forEach","removeAllListeners","remove","updateOnEachComponentUpdate","disableImagesLoaded","event","updateOnEachImageLoad","handler","debounce","instance","onImagesLoaded","imgLoad","imagesLoadedOptions","off","cancel","layout","leading","elementResizeDetectorMaker","strategy","listenTo","uninstall","destroy","omit","Object","keys","propTypes","React","createElement","elementType","ref","n","Component","module","exports","default","defaultProps","className","PropTypes","bool","func","object","string"],"sources":["../src/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport elementResizeDetectorMaker from 'element-resize-detector'\nimport debounce from 'lodash.debounce'\nimport omit from 'lodash.omit'\nimport PropTypes from 'prop-types'\n\nconst isBrowser = typeof window !== 'undefined'\nconst Masonry = isBrowser ? window.Masonry || require('masonry-layout') : null\nconst imagesloaded = isBrowser ? require('imagesloaded') : null\n\nclass MasonryComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.masonry = false\n    this.erd = undefined\n    this.latestKnownDomChildren = []\n    this.imagesLoadedCancelRef = undefined\n    this.masonryContainer = undefined\n\n    this.initializeMasonry = this.initializeMasonry.bind(this)\n    this.getCurrentDomChildren = this.getCurrentDomChildren.bind(this)\n    this.diffDomChildren = this.diffDomChildren.bind(this)\n    this.performLayout = this.performLayout.bind(this)\n    this.derefImagesLoaded = this.derefImagesLoaded.bind(this)\n    this.imagesLoaded = this.imagesLoaded.bind(this)\n    this.reloadLayout = this.reloadLayout.bind(this)\n    this.initializeResizableChildren = this.initializeResizableChildren.bind(this)\n    this.listenToElementResize = this.listenToElementResize.bind(this)\n    this.destroyErd = this.destroyErd.bind(this)\n  }\n\n  initializeMasonry (force) {\n    if (!this.masonry || force) {\n      this.masonry = new Masonry(\n        this.masonryContainer,\n        this.props.options\n      )\n\n      if (this.props.onLayoutComplete) {\n        this.masonry.on('layoutComplete', this.props.onLayoutComplete)\n      }\n\n      if (this.props.onRemoveComplete) {\n        this.masonry.on('removeComplete', this.props.onRemoveComplete)\n      }\n\n      this.latestKnownDomChildren = this.getCurrentDomChildren()\n    }\n  }\n\n  getCurrentDomChildren () {\n    const node = this.masonryContainer\n    const children = this.props.options.itemSelector ? node.querySelectorAll(this.props.options.itemSelector) : node.children\n    return Array.prototype.slice.call(children)\n  }\n\n  diffDomChildren () {\n    let forceItemReload = false\n\n    const knownChildrenStillAttached = this.latestKnownDomChildren.filter(function(element) {\n      /*\n       * take only elements attached to DOM\n       * (aka the parent is the masonry container, not null)\n       * otherwise masonry would try to \"remove it\" again from the DOM\n       */\n      return !!element.parentNode\n    })\n\n    /*\n     * If not all known children are attached to the dom - we have no other way of notifying\n     * masonry to remove the ones not still attached besides invoking a complete item reload.\n     * basically all the rest of the code below does not matter in that case.\n     */\n    if (knownChildrenStillAttached.length !== this.latestKnownDomChildren.length) {\n      forceItemReload = true\n    }\n\n    const currentDomChildren = this.getCurrentDomChildren()\n\n    /*\n     * Since we are looking for a known child which is also attached to the dom AND\n     * not attached to the dom at the same time - this would *always* produce an empty array.\n     */\n    const removed = knownChildrenStillAttached.filter(function(attachedKnownChild) {\n      return !~currentDomChildren.indexOf(attachedKnownChild)\n    })\n\n    /*\n     * This would get any children which are attached to the dom but are *unkown* to us\n     * from previous renders\n     */\n    const newDomChildren = currentDomChildren.filter(function(currentChild) {\n      return !~knownChildrenStillAttached.indexOf(currentChild)\n    })\n\n    let beginningIndex = 0\n\n    // get everything added to the beginning of the DOMNode list\n    const prepended = newDomChildren.filter(function(newChild) {\n      const prepend = (beginningIndex === currentDomChildren.indexOf(newChild))\n\n      if (prepend) {\n        // increase the index\n        beginningIndex++\n      }\n\n      return prepend\n    })\n\n    // we assume that everything else is appended\n    const appended = newDomChildren.filter(function(el) {\n      return prepended.indexOf(el) === -1\n    })\n\n    /*\n     * otherwise we reverse it because so we're going through the list picking off the items that\n     * have been added at the end of the list. this complex logic is preserved in case it needs to be\n     * invoked\n     *\n     * const endingIndex = currentDomChildren.length - 1\n     *\n     * newDomChildren.reverse().filter(function(newChild, i){\n     *     const append = endingIndex == currentDomChildren.indexOf(newChild)\n     *\n     *     if (append) {\n     *         endingIndex--\n     *     }\n     *\n     *     return append\n     * })\n     */\n\n    // get everything added to the end of the DOMNode list\n    let moved = []\n\n    /*\n     * This would always be true (see above about the lofic for \"removed\")\n     */\n    if (removed.length === 0) {\n      /*\n       * 'moved' will contain some random elements (if any) since the \"knownChildrenStillAttached\" is a filter\n       * of the \"known\" children which are still attached - All indexes could basically change. (for example\n       * if the first element is not attached)\n       * Don't trust this array.\n       */\n      moved = knownChildrenStillAttached.filter(function(child, index) {\n        return index !== currentDomChildren.indexOf(child)\n      })\n    }\n\n    this.latestKnownDomChildren = currentDomChildren\n\n    return {\n      old: knownChildrenStillAttached, // Not used\n      new: currentDomChildren, // Not used\n      removed: removed,\n      appended: appended,\n      prepended: prepended,\n      moved: moved,\n      forceItemReload: forceItemReload\n    }\n  }\n\n  performLayout () {\n    const diff = this.diffDomChildren()\n    let reloadItems = diff.forceItemReload || diff.moved.length > 0\n\n    // Would never be true. (see comments of 'diffDomChildren' about 'removed')\n    if (diff.removed.length > 0) {\n      if (this.props.enableResizableChildren) {\n        diff.removed.forEach(this.erd.removeAllListeners, this.erd)\n      }\n      this.masonry.remove(diff.removed)\n      reloadItems = true\n    }\n\n    if (diff.appended.length > 0) {\n      this.masonry.appended(diff.appended)\n\n      if (diff.prepended.length === 0) {\n        reloadItems = true\n      }\n\n      if (this.props.enableResizableChildren) {\n        diff.appended.forEach(this.listenToElementResize, this)\n      }\n    }\n\n    if (diff.prepended.length > 0) {\n      if (!reloadItems) {\n        this.masonry.prepended(diff.prepended)\n      }\n\n      if (this.props.enableResizableChildren) {\n        diff.prepended.forEach(this.listenToElementResize, this)\n      }\n    }\n\n    if (reloadItems) {\n      this.masonry.reloadItems()\n    }\n\n    if (this.props.updateOnEachComponentUpdate || reloadItems) {\n      this.reloadLayout()\n    }\n  }\n\n  derefImagesLoaded () {\n    this.imagesLoadedCancelRef()\n    this.imagesLoadedCancelRef = undefined\n  }\n\n  imagesLoaded () {\n    if (this.props.disableImagesLoaded) {\n      return\n    }\n\n    if (this.imagesLoadedCancelRef) {\n      this.derefImagesLoaded()\n    }\n\n    const event = this.props.updateOnEachImageLoad ? 'progress' : 'always'\n    const handler = debounce(\n      function(instance) {\n        if (this.props.onImagesLoaded) {\n          this.props.onImagesLoaded(instance)\n        }\n        this.reloadLayout()\n      }.bind(this), 100)\n\n    const imgLoad = imagesloaded(this.masonryContainer, this.props.imagesLoadedOptions).on(event, handler)\n\n    this.imagesLoadedCancelRef = function() {\n      imgLoad.off(event, handler)\n      handler.cancel()\n    }\n  }\n\n  reloadLayout () {\n    debounce(() => {\n        this.masonry.layout()\n      }, 100, {\n        leading: true\n      }\n    )\n  }\n\n  initializeResizableChildren () {\n    if (!this.props.enableResizableChildren) {\n      return\n    }\n\n    this.erd = elementResizeDetectorMaker({\n      strategy: 'scroll'\n    })\n\n    this.latestKnownDomChildren.forEach(this.listenToElementResize, this)\n  }\n\n  listenToElementResize (el) {\n    this.erd.listenTo(el, this.reloadLayout)\n  }\n\n  destroyErd () {\n    if (this.erd) {\n      this.latestKnownDomChildren.forEach(this.erd.uninstall, this.erd)\n    }\n  }\n\n  componentDidMount () {\n    this.initializeMasonry()\n    this.initializeResizableChildren()\n    this.imagesLoaded()\n  }\n\n  componentDidUpdate () {\n    this.performLayout()\n    this.imagesLoaded()\n  }\n\n  componentWillUnmount () {\n    this.destroyErd()\n\n    // unregister events\n    if (this.props.onLayoutComplete) {\n      this.masonry.off('layoutComplete', this.props.onLayoutComplete)\n    }\n\n    if (this.props.onRemoveComplete) {\n      this.masonry.off('removeComplete', this.props.onRemoveComplete)\n    }\n\n    if (this.imagesLoadedCancelRef) {\n      this.derefImagesLoaded()\n    }\n    this.masonry.destroy()\n  }\n\n  render () {\n    const props = omit(this.props, Object.keys(MasonryComponent.propTypes))\n    return React.createElement(this.props.elementType, {...props, ref: n => this.masonryContainer = n }, this.props.children)\n  }\n}\n\nmodule.exports = MasonryComponent\nmodule.exports.default = MasonryComponent\n\nMasonryComponent.defaultProps = {\n  enableResizableChildren: false,\n  disableImagesLoaded: false,\n  updateOnEachImageLoad: false,\n  options: {},\n  imagesLoadedOptions: {},\n  className: '',\n  elementType: 'div',\n  onLayoutComplete: () => {},\n  onRemoveComplete: () => {},\n  updateOnEachComponentUpdate: true\n}\n\n\nMasonryComponent.propTypes = {\n  enableResizableChildren: PropTypes.bool,\n  disableImagesLoaded: PropTypes.bool,\n  onImagesLoaded: PropTypes.func,\n  updateOnEachImageLoad: PropTypes.bool,\n  options: PropTypes.object,\n  imagesLoadedOptions: PropTypes.object,\n  elementType: PropTypes.string,\n  onLayoutComplete: PropTypes.func,\n  onRemoveComplete: PropTypes.func,\n  updateOnEachComponentUpdate: PropTypes.bool\n}\n"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAElC,IAAMA,SAAS,GAAG,OAAOC,MAAM,KAAK,WAAW;AAC/C,IAAMC,OAAO,GAAGF,SAAS,GAAGC,MAAM,CAACC,OAAO,IAAIC,OAAO,CAAC,gBAAgB,CAAC,GAAG,IAAI;AAC9E,IAAMC,YAAY,GAAGJ,SAAS,GAAGG,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI;AAAA,IAEzDE,gBAAgB;EAAA;EAAA;EACpB,0BAAYC,KAAK,EAAE;IAAA;IAAA;IACjB,0BAAMA,KAAK;IACX,MAAKC,OAAO,GAAG,KAAK;IACpB,MAAKC,GAAG,GAAGC,SAAS;IACpB,MAAKC,sBAAsB,GAAG,EAAE;IAChC,MAAKC,qBAAqB,GAAGF,SAAS;IACtC,MAAKG,gBAAgB,GAAGH,SAAS;IAEjC,MAAKI,iBAAiB,GAAG,MAAKA,iBAAiB,CAACC,IAAI,6CAAM;IAC1D,MAAKC,qBAAqB,GAAG,MAAKA,qBAAqB,CAACD,IAAI,6CAAM;IAClE,MAAKE,eAAe,GAAG,MAAKA,eAAe,CAACF,IAAI,6CAAM;IACtD,MAAKG,aAAa,GAAG,MAAKA,aAAa,CAACH,IAAI,6CAAM;IAClD,MAAKI,iBAAiB,GAAG,MAAKA,iBAAiB,CAACJ,IAAI,6CAAM;IAC1D,MAAKK,YAAY,GAAG,MAAKA,YAAY,CAACL,IAAI,6CAAM;IAChD,MAAKM,YAAY,GAAG,MAAKA,YAAY,CAACN,IAAI,6CAAM;IAChD,MAAKO,2BAA2B,GAAG,MAAKA,2BAA2B,CAACP,IAAI,6CAAM;IAC9E,MAAKQ,qBAAqB,GAAG,MAAKA,qBAAqB,CAACR,IAAI,6CAAM;IAClE,MAAKS,UAAU,GAAG,MAAKA,UAAU,CAACT,IAAI,6CAAM;IAAA;EAC9C;EAAC;IAAA;IAAA,OAED,2BAAmBU,KAAK,EAAE;MACxB,IAAI,CAAC,IAAI,CAACjB,OAAO,IAAIiB,KAAK,EAAE;QAC1B,IAAI,CAACjB,OAAO,GAAG,IAAIL,OAAO,CACxB,IAAI,CAACU,gBAAgB,EACrB,IAAI,CAACN,KAAK,CAACmB,OAAO,CACnB;QAED,IAAI,IAAI,CAACnB,KAAK,CAACoB,gBAAgB,EAAE;UAC/B,IAAI,CAACnB,OAAO,CAACoB,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAACrB,KAAK,CAACoB,gBAAgB,CAAC;QAChE;QAEA,IAAI,IAAI,CAACpB,KAAK,CAACsB,gBAAgB,EAAE;UAC/B,IAAI,CAACrB,OAAO,CAACoB,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAACrB,KAAK,CAACsB,gBAAgB,CAAC;QAChE;QAEA,IAAI,CAAClB,sBAAsB,GAAG,IAAI,CAACK,qBAAqB,EAAE;MAC5D;IACF;EAAC;IAAA;IAAA,OAED,iCAAyB;MACvB,IAAMc,IAAI,GAAG,IAAI,CAACjB,gBAAgB;MAClC,IAAMkB,QAAQ,GAAG,IAAI,CAACxB,KAAK,CAACmB,OAAO,CAACM,YAAY,GAAGF,IAAI,CAACG,gBAAgB,CAAC,IAAI,CAAC1B,KAAK,CAACmB,OAAO,CAACM,YAAY,CAAC,GAAGF,IAAI,CAACC,QAAQ;MACzH,OAAOG,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACN,QAAQ,CAAC;IAC7C;EAAC;IAAA;IAAA,OAED,2BAAmB;MACjB,IAAIO,eAAe,GAAG,KAAK;MAE3B,IAAMC,0BAA0B,GAAG,IAAI,CAAC5B,sBAAsB,CAAC6B,MAAM,CAAC,UAASC,OAAO,EAAE;QACtF;AACN;AACA;AACA;AACA;QACM,OAAO,CAAC,CAACA,OAAO,CAACC,UAAU;MAC7B,CAAC,CAAC;;MAEF;AACJ;AACA;AACA;AACA;MACI,IAAIH,0BAA0B,CAACI,MAAM,KAAK,IAAI,CAAChC,sBAAsB,CAACgC,MAAM,EAAE;QAC5EL,eAAe,GAAG,IAAI;MACxB;MAEA,IAAMM,kBAAkB,GAAG,IAAI,CAAC5B,qBAAqB,EAAE;;MAEvD;AACJ;AACA;AACA;MACI,IAAM6B,OAAO,GAAGN,0BAA0B,CAACC,MAAM,CAAC,UAASM,kBAAkB,EAAE;QAC7E,OAAO,CAAC,CAACF,kBAAkB,CAACG,OAAO,CAACD,kBAAkB,CAAC;MACzD,CAAC,CAAC;;MAEF;AACJ;AACA;AACA;MACI,IAAME,cAAc,GAAGJ,kBAAkB,CAACJ,MAAM,CAAC,UAASS,YAAY,EAAE;QACtE,OAAO,CAAC,CAACV,0BAA0B,CAACQ,OAAO,CAACE,YAAY,CAAC;MAC3D,CAAC,CAAC;MAEF,IAAIC,cAAc,GAAG,CAAC;;MAEtB;MACA,IAAMC,SAAS,GAAGH,cAAc,CAACR,MAAM,CAAC,UAASY,QAAQ,EAAE;QACzD,IAAMC,OAAO,GAAIH,cAAc,KAAKN,kBAAkB,CAACG,OAAO,CAACK,QAAQ,CAAE;QAEzE,IAAIC,OAAO,EAAE;UACX;UACAH,cAAc,EAAE;QAClB;QAEA,OAAOG,OAAO;MAChB,CAAC,CAAC;;MAEF;MACA,IAAMC,QAAQ,GAAGN,cAAc,CAACR,MAAM,CAAC,UAASe,EAAE,EAAE;QAClD,OAAOJ,SAAS,CAACJ,OAAO,CAACQ,EAAE,CAAC,KAAK,CAAC,CAAC;MACrC,CAAC,CAAC;;MAEF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;MACA,IAAIC,KAAK,GAAG,EAAE;;MAEd;AACJ;AACA;MACI,IAAIX,OAAO,CAACF,MAAM,KAAK,CAAC,EAAE;QACxB;AACN;AACA;AACA;AACA;AACA;QACMa,KAAK,GAAGjB,0BAA0B,CAACC,MAAM,CAAC,UAASiB,KAAK,EAAEC,KAAK,EAAE;UAC/D,OAAOA,KAAK,KAAKd,kBAAkB,CAACG,OAAO,CAACU,KAAK,CAAC;QACpD,CAAC,CAAC;MACJ;MAEA,IAAI,CAAC9C,sBAAsB,GAAGiC,kBAAkB;MAEhD,OAAO;QACLe,GAAG,EAAEpB,0BAA0B;QAAE;QACjCqB,GAAG,EAAEhB,kBAAkB;QAAE;QACzBC,OAAO,EAAEA,OAAO;QAChBS,QAAQ,EAAEA,QAAQ;QAClBH,SAAS,EAAEA,SAAS;QACpBK,KAAK,EAAEA,KAAK;QACZlB,eAAe,EAAEA;MACnB,CAAC;IACH;EAAC;IAAA;IAAA,OAED,yBAAiB;MACf,IAAMuB,IAAI,GAAG,IAAI,CAAC5C,eAAe,EAAE;MACnC,IAAI6C,WAAW,GAAGD,IAAI,CAACvB,eAAe,IAAIuB,IAAI,CAACL,KAAK,CAACb,MAAM,GAAG,CAAC;;MAE/D;MACA,IAAIkB,IAAI,CAAChB,OAAO,CAACF,MAAM,GAAG,CAAC,EAAE;QAC3B,IAAI,IAAI,CAACpC,KAAK,CAACwD,uBAAuB,EAAE;UACtCF,IAAI,CAAChB,OAAO,CAACmB,OAAO,CAAC,IAAI,CAACvD,GAAG,CAACwD,kBAAkB,EAAE,IAAI,CAACxD,GAAG,CAAC;QAC7D;QACA,IAAI,CAACD,OAAO,CAAC0D,MAAM,CAACL,IAAI,CAAChB,OAAO,CAAC;QACjCiB,WAAW,GAAG,IAAI;MACpB;MAEA,IAAID,IAAI,CAACP,QAAQ,CAACX,MAAM,GAAG,CAAC,EAAE;QAC5B,IAAI,CAACnC,OAAO,CAAC8C,QAAQ,CAACO,IAAI,CAACP,QAAQ,CAAC;QAEpC,IAAIO,IAAI,CAACV,SAAS,CAACR,MAAM,KAAK,CAAC,EAAE;UAC/BmB,WAAW,GAAG,IAAI;QACpB;QAEA,IAAI,IAAI,CAACvD,KAAK,CAACwD,uBAAuB,EAAE;UACtCF,IAAI,CAACP,QAAQ,CAACU,OAAO,CAAC,IAAI,CAACzC,qBAAqB,EAAE,IAAI,CAAC;QACzD;MACF;MAEA,IAAIsC,IAAI,CAACV,SAAS,CAACR,MAAM,GAAG,CAAC,EAAE;QAC7B,IAAI,CAACmB,WAAW,EAAE;UAChB,IAAI,CAACtD,OAAO,CAAC2C,SAAS,CAACU,IAAI,CAACV,SAAS,CAAC;QACxC;QAEA,IAAI,IAAI,CAAC5C,KAAK,CAACwD,uBAAuB,EAAE;UACtCF,IAAI,CAACV,SAAS,CAACa,OAAO,CAAC,IAAI,CAACzC,qBAAqB,EAAE,IAAI,CAAC;QAC1D;MACF;MAEA,IAAIuC,WAAW,EAAE;QACf,IAAI,CAACtD,OAAO,CAACsD,WAAW,EAAE;MAC5B;MAEA,IAAI,IAAI,CAACvD,KAAK,CAAC4D,2BAA2B,IAAIL,WAAW,EAAE;QACzD,IAAI,CAACzC,YAAY,EAAE;MACrB;IACF;EAAC;IAAA;IAAA,OAED,6BAAqB;MACnB,IAAI,CAACT,qBAAqB,EAAE;MAC5B,IAAI,CAACA,qBAAqB,GAAGF,SAAS;IACxC;EAAC;IAAA;IAAA,OAED,wBAAgB;MACd,IAAI,IAAI,CAACH,KAAK,CAAC6D,mBAAmB,EAAE;QAClC;MACF;MAEA,IAAI,IAAI,CAACxD,qBAAqB,EAAE;QAC9B,IAAI,CAACO,iBAAiB,EAAE;MAC1B;MAEA,IAAMkD,KAAK,GAAG,IAAI,CAAC9D,KAAK,CAAC+D,qBAAqB,GAAG,UAAU,GAAG,QAAQ;MACtE,IAAMC,OAAO,GAAG,IAAAC,eAAQ,EACtB,UAASC,QAAQ,EAAE;QACjB,IAAI,IAAI,CAAClE,KAAK,CAACmE,cAAc,EAAE;UAC7B,IAAI,CAACnE,KAAK,CAACmE,cAAc,CAACD,QAAQ,CAAC;QACrC;QACA,IAAI,CAACpD,YAAY,EAAE;MACrB,CAAC,CAACN,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC;MAEpB,IAAM4D,OAAO,GAAGtE,YAAY,CAAC,IAAI,CAACQ,gBAAgB,EAAE,IAAI,CAACN,KAAK,CAACqE,mBAAmB,CAAC,CAAChD,EAAE,CAACyC,KAAK,EAAEE,OAAO,CAAC;MAEtG,IAAI,CAAC3D,qBAAqB,GAAG,YAAW;QACtC+D,OAAO,CAACE,GAAG,CAACR,KAAK,EAAEE,OAAO,CAAC;QAC3BA,OAAO,CAACO,MAAM,EAAE;MAClB,CAAC;IACH;EAAC;IAAA;IAAA,OAED,wBAAgB;MAAA;MACd,IAAAN,eAAQ,EAAC,YAAM;QACX,MAAI,CAAChE,OAAO,CAACuE,MAAM,EAAE;MACvB,CAAC,EAAE,GAAG,EAAE;QACNC,OAAO,EAAE;MACX,CAAC,CACF;IACH;EAAC;IAAA;IAAA,OAED,uCAA+B;MAC7B,IAAI,CAAC,IAAI,CAACzE,KAAK,CAACwD,uBAAuB,EAAE;QACvC;MACF;MAEA,IAAI,CAACtD,GAAG,GAAG,IAAAwE,8BAA0B,EAAC;QACpCC,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEF,IAAI,CAACvE,sBAAsB,CAACqD,OAAO,CAAC,IAAI,CAACzC,qBAAqB,EAAE,IAAI,CAAC;IACvE;EAAC;IAAA;IAAA,OAED,+BAAuBgC,EAAE,EAAE;MACzB,IAAI,CAAC9C,GAAG,CAAC0E,QAAQ,CAAC5B,EAAE,EAAE,IAAI,CAAClC,YAAY,CAAC;IAC1C;EAAC;IAAA;IAAA,OAED,sBAAc;MACZ,IAAI,IAAI,CAACZ,GAAG,EAAE;QACZ,IAAI,CAACE,sBAAsB,CAACqD,OAAO,CAAC,IAAI,CAACvD,GAAG,CAAC2E,SAAS,EAAE,IAAI,CAAC3E,GAAG,CAAC;MACnE;IACF;EAAC;IAAA;IAAA,OAED,6BAAqB;MACnB,IAAI,CAACK,iBAAiB,EAAE;MACxB,IAAI,CAACQ,2BAA2B,EAAE;MAClC,IAAI,CAACF,YAAY,EAAE;IACrB;EAAC;IAAA;IAAA,OAED,8BAAsB;MACpB,IAAI,CAACF,aAAa,EAAE;MACpB,IAAI,CAACE,YAAY,EAAE;IACrB;EAAC;IAAA;IAAA,OAED,gCAAwB;MACtB,IAAI,CAACI,UAAU,EAAE;;MAEjB;MACA,IAAI,IAAI,CAACjB,KAAK,CAACoB,gBAAgB,EAAE;QAC/B,IAAI,CAACnB,OAAO,CAACqE,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACtE,KAAK,CAACoB,gBAAgB,CAAC;MACjE;MAEA,IAAI,IAAI,CAACpB,KAAK,CAACsB,gBAAgB,EAAE;QAC/B,IAAI,CAACrB,OAAO,CAACqE,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACtE,KAAK,CAACsB,gBAAgB,CAAC;MACjE;MAEA,IAAI,IAAI,CAACjB,qBAAqB,EAAE;QAC9B,IAAI,CAACO,iBAAiB,EAAE;MAC1B;MACA,IAAI,CAACX,OAAO,CAAC6E,OAAO,EAAE;IACxB;EAAC;IAAA;IAAA,OAED,kBAAU;MAAA;MACR,IAAM9E,KAAK,GAAG,IAAA+E,gBAAI,EAAC,IAAI,CAAC/E,KAAK,EAAEgF,MAAM,CAACC,IAAI,CAAClF,gBAAgB,CAACmF,SAAS,CAAC,CAAC;MACvE,oBAAOC,cAAK,CAACC,aAAa,CAAC,IAAI,CAACpF,KAAK,CAACqF,WAAW,kCAAMrF,KAAK;QAAEsF,GAAG,EAAE,aAAAC,CAAC;UAAA,OAAI,MAAI,CAACjF,gBAAgB,GAAGiF,CAAC;QAAA;MAAA,IAAI,IAAI,CAACvF,KAAK,CAACwB,QAAQ,CAAC;IAC3H;EAAC;EAAA;AAAA,EAnS4BgE,gBAAS;AAsSxCC,MAAM,CAACC,OAAO,GAAG3F,gBAAgB;AACjC0F,MAAM,CAACC,OAAO,CAACC,OAAO,GAAG5F,gBAAgB;AAEzCA,gBAAgB,CAAC6F,YAAY,GAAG;EAC9BpC,uBAAuB,EAAE,KAAK;EAC9BK,mBAAmB,EAAE,KAAK;EAC1BE,qBAAqB,EAAE,KAAK;EAC5B5C,OAAO,EAAE,CAAC,CAAC;EACXkD,mBAAmB,EAAE,CAAC,CAAC;EACvBwB,SAAS,EAAE,EAAE;EACbR,WAAW,EAAE,KAAK;EAClBjE,gBAAgB,EAAE,4BAAM,CAAC,CAAC;EAC1BE,gBAAgB,EAAE,4BAAM,CAAC,CAAC;EAC1BsC,2BAA2B,EAAE;AAC/B,CAAC;AAGD7D,gBAAgB,CAACmF,SAAS,GAAG;EAC3B1B,uBAAuB,EAAEsC,kBAAS,CAACC,IAAI;EACvClC,mBAAmB,EAAEiC,kBAAS,CAACC,IAAI;EACnC5B,cAAc,EAAE2B,kBAAS,CAACE,IAAI;EAC9BjC,qBAAqB,EAAE+B,kBAAS,CAACC,IAAI;EACrC5E,OAAO,EAAE2E,kBAAS,CAACG,MAAM;EACzB5B,mBAAmB,EAAEyB,kBAAS,CAACG,MAAM;EACrCZ,WAAW,EAAES,kBAAS,CAACI,MAAM;EAC7B9E,gBAAgB,EAAE0E,kBAAS,CAACE,IAAI;EAChC1E,gBAAgB,EAAEwE,kBAAS,CAACE,IAAI;EAChCpC,2BAA2B,EAAEkC,kBAAS,CAACC;AACzC,CAAC"}